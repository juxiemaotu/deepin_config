# Rime schema
# encoding: utf-8
# Changelog
# 张洪 <homy8023@163.com>
#     - 西风瘦码 单字版 简体版
#     - Convert to Rime dictionary format.
#
# 原作者:西风瘦码-化外愚民
# huawaiyumin <xxxxxxxxxxxxxxxx@xxxxxxxx.com>

schema:
  schema_id: xifeng_danzi_simp
  name: 西风单简
  version: "0.01"
  author:
    - 张洪 <homy8023@163.com>
  description: |
    西风瘦码，簡化单字輸出模式。

switches:                               #開關
  - name: ascii_mode                    #中英文轉換開關。預設0爲英文，1爲中文
    reset: 0
    states: [ 中文, 西文 ]
  - name: full_shape                    #全角符號／半角符號開關。注意，開啓全角時英文字母亦爲全角。0爲半角，1爲全角
    states: [ 半角, 全角 ]
  - name: ascii_punct                   #中西文標點轉換開關，0爲中文句讀，1爲西文標點。
    states: [ 。，, ．， ]

engine:                                 # 輸入引擎設定，即掛接組件的「處方」
  processors:                           # 一、這批組件處理各類按鍵消息
    - ascii_composer                    # ※ 處理西文模式及中西文切換
    - recognizer                        # ※ 與 matcher 搭配，處理符合特定規則的輸入碼，如網址、反查等
    - key_binder                        # ※ 在特定條件下將按鍵綁定到其他按鍵，如重定義逗號、句號爲候選翻頁鍵
    - speller                           # ※ 拼寫處理器，接受字符按鍵，編輯輸入碼
    - punctuator                        # ※ 句讀處理器，將單個字符按鍵直接映射爲文字符號
    - selector                          # ※ 選字處理器，處理數字選字鍵、上、下候選定位、換頁鍵
    - navigator                         # ※ 處理輸入欄內的光標移動鍵
    - express_editor                    # ※ 編輯器，處理空格、回車上屏、回退鍵等

  segmentors:                           # 二、這批組件識別不同內容類型，將輸入碼分段
    - ascii_segmentor                   # ※ 標識西文段落，〔譬如在西文模式下〕字母直接上屛
    - matcher                           # ※ 標識符合特定規則的段落，如網址、反查等，加上特定tag
    - abc_segmentor                     # ※ 標識常規的文字段落，加上abc這個tag
    - punct_segmentor                   # ※ 標識句讀段落，加上punct這個tag
    - fallback_segmentor                # ※ 標識其他未標識段落

  translators:                          # 三、這批組件翻譯特定類型的編碼段爲一組候選文字
#    - echo_translator                   # ※ 沒有其他候選字時，回顯輸入碼〔輸入碼可以Shift+Enter上屛〕
    - punct_translator                  # ※ 轉換標點符號，配合punct_segmentor轉換標點符號
    - table_translator                  # ※ 碼表翻譯器，用於倉頡、五筆等基於碼表的輸入方案，替換 script_translator。此項可加載多個實例，後接@+翻譯器名〔如：cangjie、wubi等〕
#    - script_translator                 # ※ 腳本翻譯器，用於拼音等基於音節表的輸入方案，此項可加載多個實例，後接@+翻譯器名〔如：pinyin、jyutping等〕
    - reverse_lookup_translator         # ※ 反查翻譯器，用另一種編碼方案查碼

speller:
  alphabet: ';,/.eiaoubcdfghjklmnpqrstvwxyz0123456789' #用作输入的键（区分大小写，不分顺序）
  initials: 'bcdfghjklmnpqrstvwxyzo'        #首位编码
  auto_select: true                        #自動上屛〔true或false〕，使用顶功必须打开
  auto_select_pattern: '|(.[aeiou][bcdfghjklmnpqrstvwxyz].)|(.{0,3}[;,./])|(.{0,4})'  #自動上屏規則，以正則表達式描述，當輸入串可以被匹配時自動頂字上屏。

translator:                                       # 翻译器，依赖码表（字典）
  dictionary: xifeng_danzi_simp                   # 字典名，一张字典文件即可，部署后自动生成table.bin文件
  enable_sentence: false                          # 自动成句，不能顶功，必须关闭
  enable_encoder: false                            # 自动成词，不能顶功，必须关闭

reverse_lookup:                                #用另一种编码方式反查（一般为拼音、笔画）
  dictionary: xifeng_danzi_simp_fancha         #反查字典，为bin格式，单纯的反查码表不能直接使用
  prefix: "`"                                   #反查引导键，输入法自行标记分段翻译处理，不用写在编码中，故可随意自定义
  suffix: "'"                                   #反查终止键，一般在recognizer/pattrens正则处理掉，不用编辑输入
  tips: 〔拼音反查〕
  preedit_format:                               #拼音转化规则中丽郎当悟原刷*着次淑*势齑网a*市就'、；/.'
    - xform/([nl])v/$1ü/
    - xform/([nl])ue/$1üe/
    - xform/([jqxy])v/$1u/

punctuator:                           #標點符號設置，可先默认，在定义覆盖部分。
  import_preset: symbols
  half_shape:                         #将;//对应的默认标点转移，避免非全码连续输入时出错
#   '\' : [ 、, '\', ＼ ]             # \斜线已全局映射，无法使用数字键选标点，将其对应的默认标点转移空
#    '/': [ 、, ､, '/', ／, ÷ ]       # 因symbols无法使用数字键选标点，将其对应的默认标点转移空
    ';': [ '$$', '**', "###", '```' ]            # 替换成常用标点，以TAB切换，方便输入(markdown常用)，建议最多设四个，避免出错也不便捷
    '[': [ ';', '/', ÷, ／, 「, 【, 〔, ［ ]         # 补“;”，“/”，及本身
    ']': [ 、, '\', ＼, 」, 】, 〕, ］ ]             # 补“、”，“\”，及本身

key_binder:             #下設bindings: 設置功能性快捷鍵
  import_preset: default
  bindings:             # 每條定義包含條件、接收按鍵（IBus規格的鍵名，可加修飾符，如「Control+Return」）、發送按鍵
    - { when: has_menu, accept: comma, send: comma }              # 简码,   再次定义操作时映射，屏蔽可能的其它设置
    - { when: has_menu, accept: period, send: period }            # 简码.
    - { when: has_menu, accept: slash, send: slash }              # 简码/
    - { when: has_menu, accept: semicolon, send: semicolon }      # 简码;
    - { when: always, accept: backslash, send: slash }            # 将\\全局映射为/，用于symbols标点
    - { when: has_menu, accept: Tab, send: KP_Down }              # 有候选项时，用TAB左右选择

recognizer:                               # 完成段落劃分、tag分配，一般默认了
  import_preset: default
  patterns:
    reverse_lookup: "`[a-z]*'?$"          # 反查引导规则
    punct: "^/[0-9]*[a-z]*$"              # symbols标点规则
